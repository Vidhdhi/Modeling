# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h9HbWWN8Njm5-7yOc4QmvXpPGfSNApiu
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


data = pd.read_csv('/content/cancer patient data sets.csv')

data_cleaned = data.dropna()


duplicate_rows = data_cleaned[data_cleaned.duplicated()]
print("Number of duplicate rows:", duplicate_rows.shape[0])

plt.figure(figsize=(8, 6))
sns.boxplot(data=data_cleaned.drop(columns=['Level']))
plt.title('Distribution of Attributes (Cleaned)')
plt.ylabel('Attribute Value')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(8, 6))
sns.boxplot(x='Age', data=data_cleaned)
plt.title('Distribution of Patient Satisfaction Scores')
plt.xlabel('Satisfaction Level')
plt.show()

plt.figure(figsize=(12, 8))
plt.subplot(2, 3, 1)
sns.histplot(data=data_cleaned, x='Age', bins=20, kde=True)
plt.title('Age Distribution')
plt.tight_layout()
plt.show()

print(data.head())
print(data.info())

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.impute import SimpleImputer

data['Patient Id'] = data['Patient Id'].astype(str).str.replace('P', '', regex=False)
data['Patient Id'] = pd.to_numeric(data['Patient Id'], errors='coerce')

level_mapping = {'Low': 1, 'Medium': 2, 'High': 3}
data['Level'] = data['Level'].map(level_mapping)

X = data.drop(columns=['Level'])
y = data['Gender']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

imputer = SimpleImputer(strategy='mean')
X_train_imputed = imputer.fit_transform(X_train)
X_test_imputed = imputer.transform(X_test)

print(y_train.value_counts())

model = LinearRegression()
model.fit(X_train_imputed, y_train)

y_pred = model.predict(X_test_imputed)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

plt.figure(figsize=(6, 4))
sns.countplot(x='Gender', data=data)
plt.title('Distribution of Gender')
plt.xlabel('Gender')
plt.ylabel('Count')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(data=data_cleaned, x='Level', bins=20, kde=True)
plt.title('Predicted vs. Actual Values')
plt.xlabel('Level')
plt.ylabel('Gender')
plt.show()

plt.figure(figsize=(12, 8))

sns.barplot(data=data_cleaned, x='Level', y='Gender',
hue='Smoking')
plt.xticks(rotation=45, ha='right')
plt.title('Predictive Modeling and Visualization for Cancer Patient Satisfaction')
plt.xlabel('Level')
plt.ylabel('Gender')
plt.legend(title='Level', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 8))
correlation_matrix = data_cleaned.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix Heatmap')
plt.show()

plt.figure(figsize=(10, 6))
coefficients = pd.Series(model.coef_, index=X.columns)
coefficients.plot(kind='bar')
plt.title('Feature Importance')
plt.ylabel('Coefficient Value')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 6))
sns.regplot(x='Alcohol use', y='Weight Loss', data=data_cleaned)
plt.title('Regression Line: Alcohol vs.Weight Loss')
plt.xlabel('Alcohol')
plt.ylabel('Weight')
plt.show()